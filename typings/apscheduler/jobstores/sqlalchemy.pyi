"""
This type stub file was generated by pyright.
"""

from apscheduler.jobstores.base import BaseJobStore

class SQLAlchemyJobStore(BaseJobStore):
    """
    Stores jobs in a database table using SQLAlchemy.
    The table will be created if it doesn't exist in the database.

    Plugin alias: ``sqlalchemy``

    :param str url: connection string (see
        :ref:`SQLAlchemy documentation <sqlalchemy:database_urls>` on this)
    :param engine: an SQLAlchemy :class:`~sqlalchemy.engine.Engine` to use instead of creating a
        new one based on ``url``
    :param str tablename: name of the table to store jobs in
    :param metadata: a :class:`~sqlalchemy.schema.MetaData` instance to use instead of creating a
        new one
    :param int pickle_protocol: pickle protocol level to use (for serialization), defaults to the
        highest available
    :param str tableschema: name of the (existing) schema in the target database where the table
        should be
    :param dict engine_options: keyword arguments to :func:`~sqlalchemy.create_engine`
        (ignored if ``engine`` is given)
    """
    def __init__(self, url=..., engine=..., tablename=..., metadata=..., pickle_protocol=..., tableschema=..., engine_options=...) -> None:
        ...
    
    def start(self, scheduler, alias): # -> None:
        ...
    
    def lookup_job(self, job_id): # -> Job | None:
        ...
    
    def get_due_jobs(self, now): # -> list[Any]:
        ...
    
    def get_next_run_time(self): # -> datetime | None:
        ...
    
    def get_all_jobs(self): # -> list[Any]:
        ...
    
    def add_job(self, job): # -> None:
        ...
    
    def update_job(self, job): # -> None:
        ...
    
    def remove_job(self, job_id): # -> None:
        ...
    
    def remove_all_jobs(self): # -> None:
        ...
    
    def shutdown(self): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


